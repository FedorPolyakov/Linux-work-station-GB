Задание 1:
1) открыть порты 80 и 443 можно при помощи следующих команд: 
sudo ufw allow 80
sudo ufw allow 443


Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом "Hi $user!", где $user - это значение хидера 'User'.
иначе отправлять код 404 с текстом "Page not found".

root@fpolyakov-ubuntu:/home/fpolyakov# cat /etc/nginx/sites-enabled/abcde.ru
server {
       listen 80;
       listen [::]:80;

       server_name abcde.ru;

       location / {
               if ($http_name != "Fedor"){
                return 404 "Not found";
               }
                return 200 "Hi $http_name";
          }

       location /admin {
         return 200 "admin";
                }
}

root@fpolyakov-ubuntu:/home/fpolyakov# curl -H "name: Fedor" http://localhost    Hi Fedor
root@fpolyakov-ubuntu:/home/fpolyakov# curl -H "name: Ibrahim" http://localhost  Not found

root@fpolyakov-ubuntu:/home/fpolyakov# cat /etc/hosts
127.0.0.1       localhost
127.0.1.1       fpolyakov-ubuntu
127.0.0.1       abcde.ru





Задание 2:
Самоподписанный сертфикат - это сертификат подписанный самим пользователем для своего домена или IP.
SSL состоит из двух частей - закрытый ключ и другой публичный сертификат.
Способ как сгенерировать самоподписанный сертификат:
1. Создать сертификат и private key
2. Создать ключи Диффи-Хелмана для поддрержки прямой секретности
Затем мы должны настроить NGINX для поддержки SSL
1.Создать сниппет, указывающий место хранения файлов SSL-сертификата и ключа.
2.Добавить настройки SSL.
3.Настроить блоки server для обслуживания запросов SSL и поддержки новых настроек.

После этого заходим в браузер и переходим по ip: https://127.0.0.1 
Браузер будет ругаться, что мы пытаемся перейти на незащещенный сайт, но мы можем указать браузеру, что мы доверяем этому сайту.

Асимметричное шифрование более надежное по сравнению с симметричным, так как в нем используется пара ключей : отрытый и приватный. Открытым ключом можно зашифровать данный любому пользователю и отправить, например на сервер. На сервере хранится приватный ключ, при помощи которого можно расшивровать полученный данные зашифрованный открытым ключом. 
Однако асимметричное шифрование проигрывает симметричному по быстроте шифрования больших объемов данных.

В симметричном шифровании используется один ключ для шифрования и расшифрования.
Т.е. при ssl соединении сервер - пользователь при промощи асинхронного шифрования сервер отправляет пользователю открытый ключ. При помощи данного ключа пользователь шифрует ключ ( симметричное шифрование ) и отправляет его на сервер. Сервер при помощи приватного ключа расшифовывает полученный ключ и устанавливает соединение с синхронным шифрованием для передачи данных.